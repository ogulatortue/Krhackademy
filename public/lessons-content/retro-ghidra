<section class="content-block">
    <h2><i class="fas fa-dragon" aria-hidden="true"></i> Qu'est-ce que Ghidra ?</h2>
    <p>
        <strong>Ghidra</strong> est un framework de rétro-ingénierie (reverse engineering) développé par la <strong>National Security Agency (NSA)</strong> des États-Unis. Rendu public et open-source en 2019, il est rapidement devenu un outil incontournable pour les chercheurs en sécurité, les analystes de malwares et les développeurs.
    </p>
    <p>
        Son principal atout est d'offrir gratuitement une suite d'outils d'analyse de logiciels très puissante, incluant un <strong>désassembleur</strong> et surtout un excellent <strong>décompilateur</strong>. Il permet de prendre un programme compilé (un exécutable binaire) et de tenter de reconstituer un code source lisible par un humain (souvent en C), ce qui facilite grandement la compréhension de son fonctionnement interne. C'est un concurrent direct du célèbre outil commercial IDA Pro.
    </p>
</section>

<section class="content-block">
    <h2><i class="fas fa-download" aria-hidden="true"></i> Installation et Premier Lancement</h2>
    <p>
        Ghidra est écrit en Java, il est donc multiplateforme (Windows, macOS, Linux).
    </p>
    <ol>
        <li><strong>Prérequis :</strong> Assurez-vous d'avoir une version compatible du JDK (Java Development Kit) installée sur votre machine (généralement JDK 11 ou supérieur).</li>
        <li><strong>Téléchargement :</strong> Rendez-vous sur le <a href="https://github.com/NationalSecurityAgency/ghidra/releases" target="_blank">dépôt GitHub officiel</a> et téléchargez la dernière version sous forme d'archive ZIP.</li>
        <li><strong>Lancement :</strong> Décompressez l'archive et exécutez le script de lancement (<code>ghidraRun.bat</code> sur Windows, <code>./ghidraRun</code> sur Linux/macOS).</li>
    </ol>
    <p>
        Au premier lancement, vous devrez créer un nouveau projet ("New Project"). Un projet Ghidra est simplement un dossier qui contiendra les programmes que vous analysez et toutes les métadonnées associées (commentaires, renommages, etc.).
    </p>
</section>

<section class="content-block">
    <h2><i class="fas fa-columns" aria-hidden="true"></i> L'Interface et les Fenêtres Principales</h2>
    <p>
        Une fois un programme importé et analysé, Ghidra présente une interface dense mais logique, composée de plusieurs fenêtres interconnectées.
    </p>
    <ul>
        <li><strong>Listing :</strong> C'est la vue centrale qui affiche le programme <strong>désassemblé</strong>, c'est-à-dire les instructions machine traduites en langage assembleur, une représentation textuelle de bas niveau.</li>
        <li><strong>Decompile :</strong> La fenêtre la plus puissante. Elle affiche le code <strong>décompilé</strong> de la fonction actuellement sélectionnée dans le Listing. C'est une traduction de l'assembleur en un langage de plus haut niveau (similaire au C), beaucoup plus facile à lire.</li>
        <li><strong>Symbol Tree :</strong> Affiche une arborescence de tous les "symboles" du programme : fonctions, labels, variables globales. C'est un excellent moyen de naviguer rapidement dans le code, par exemple en allant directement à la fonction <code>main</code>.</li>
        <li><strong>Program Trees :</strong> Montre la structure du fichier binaire, avec ses différentes sections (.text pour le code, .data pour les données, etc.).</li>
        <li><strong>Data Type Manager :</strong> Gère les structures de données (types, structs, enums). Définir correctement les types des variables améliore considérablement la lisibilité du code décompilé.</li>
        <li><strong>Function Graph :</strong> Représente la logique interne d'une fonction sous forme de graphe, avec des "blocs de base" (séquences d'instructions) et des flèches montrant les sauts et les boucles. Très utile pour comprendre des algorithmes complexes.</li>
    </ul>
</section>

<section class="content-block">
    <h2><i class="fas fa-search" aria-hidden="true"></i> Débuter une Analyse : La Méthodologie</h2>
    <p>
        Analyser un programme inconnu suit généralement un processus logique.
    </p>
    <ol>
        <li><strong>Trouver le point d'entrée :</strong> Le point de départ de toute analyse est la fonction principale du programme. Pour la plupart des programmes C/C++, il s'agit de la fonction <code>main</code>. Le plus simple est de la chercher dans le "Symbol Tree" et de double-cliquer dessus.</li>
        <li><strong>Analyser <code>main</code> :</strong> Étudiez le code décompilé de la fonction <code>main</code>. C'est elle qui orchestre le comportement global du programme.</li>
        <li><strong>Améliorer la lisibilité :</strong> Le code décompilé utilise des noms génériques (<code>FUN_1234</code>, <code>local_10</code>). Le travail le plus important de l'analyste est de renommer les variables et les fonctions avec des noms significatifs au fur et à mesure de sa compréhension. Ajoutez également des commentaires pour documenter vos découvertes.</li>
        <li><strong>Explorer en profondeur :</strong> Depuis <code>main</code>, explorez les fonctions qu'elle appelle en double-cliquant dessus. Répétez le processus d'analyse et de renommage pour chaque nouvelle fonction intéressante.</li>
        <li><strong>Rechercher des chaînes de caractères :</strong> Utilisez l'outil "Search > For Strings" pour trouver des textes intéressants dans le binaire (messages d'erreur, URL, noms de fichiers, etc.). Cela donne souvent des indices précieux sur les fonctionnalités du programme.</li>
    </ol>
</section>

<section class="content-block">
    <h2><i class="fas fa-laptop-code" aria-hidden="true"></i> Exercices Pratiques</h2>

    <h3>Exercice 1 : Rétro-ingénierie d'un "Hello, World!"</h3>
    <p>
        <strong>Objectif :</strong> Se familiariser avec l'interface de Ghidra en analysant un programme très simple pour trouver sa fonction principale et comprendre son unique action.
    </p>
    <details>
        <summary style="cursor: pointer;">Afficher / Masquer la Solution</summary><br>
        <div class="solution-content">
            <p><strong>Prérequis :</strong> Avoir un petit programme exécutable. Si vous êtes sous Linux, nous pouvons simplement utiliser la commande <code>ls</code>.</p>
            <p><strong>Étapes :</strong></p>
            <ol>
                <li><strong>Créez un nouveau projet Ghidra.</strong></li>
                <li><strong>Importez le binaire :</strong> Faites glisser le fichier exécutable (par exemple <code>/bin/ls</code> depuis votre explorateur de fichiers) dans la fenêtre du projet Ghidra. Une fenêtre d'importation apparaît, validez avec les options par défaut.</li>
                <li><strong>Lancez l'analyse :</strong> Double-cliquez sur le fichier importé dans Ghidra. Une fenêtre vous demandera si vous voulez l'analyser. Acceptez ("Yes") et validez la fenêtre suivante avec le bouton "Analyze" (les analyseurs par défaut sont suffisants).</li>
                <li><strong>Trouvez la fonction `main` :</strong> Dans la fenêtre "Symbol Tree" à gauche, dépliez la section "Functions". Faites défiler la liste (elle est alphabétique) jusqu'à trouver la fonction nommée <code>main</code>. Double-cliquez dessus.</li>
                <li><strong>Observez le résultat :</strong> La fenêtre "Listing" se positionne sur le début du code assembleur de `main`, et surtout, la fenêtre "Decompile" à droite vous montre maintenant une version C de cette fonction. Même si le code est complexe, vous avez trouvé le cœur du programme !</li>
            </ol>
        </div>
    </details>

</section>

<section class="content-block">
    <h2><i class="fas fa-info-circle" aria-hidden="true"></i>Informations sur le document original</h2>
    <p>
        <b>Titre :</b> INTRODUCTION À GHIDRA<br>
        <b>Auteur :</b> CÉLIAN G.<br>
        <b>Date de publication :</b> 2023
    </p>
</section>


